


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             RESET , DATA , READONLY
    2 00000000                 EXPORT           __Vectors
    3 00000000         __Vectors
    4 00000000 10001000        DCD              0X10001000  ;stack pointer valu
                                                            e stack is empty
    5 00000004 00000000        DCD              Reset_Handler ;reset vector
    6 00000008                 ALIGN
    7 00000008                 AREA             mycode , CODE, READONLY
    8 00000000                 ENTRY
    9 00000000                 EXPORT           Reset_Handler
   10 00000000         Reset_Handler
   11 00000000 4817            LDR              R0, =num1   ; Load the address 
                                                            of the first 128-bi
                                                            t number into R0
   12 00000002 4918            LDR              R1, =num2   ; Load the address 
                                                            of the second 128-b
                                                            it number into R1
   13 00000004 4A18            LDR              R2, =result ; Load the address 
                                                            to store the result
                                                             into R2
   14 00000006 4B19            LDR              R3, =borrow ; Load the address 
                                                            to store the borrow
                                                             value into R3
   15 00000008         
   16 00000008         ; Initialize borrow to 0
   17 00000008 F04F 0400       MOV              R4, #0      ; R4 will store the
                                                             borrow
   18 0000000C         
   19 0000000C         ; Subtract the lowest 32-bit words
   20 0000000C 6805            LDR              R5, [R0]    ; Load lower 32 bit
                                                            s of num1 into R5
   21 0000000E 680E            LDR              R6, [R1]    ; Load lower 32 bit
                                                            s of num2 into R6
   22 00000010 1BAF            SUBS             R7, R5, R6  ; Subtract the lowe
                                                            r 32-bit words with
                                                             borrow
   23 00000012 6017            STR              R7, [R2]    ; Store result in r
                                                            esult[0]
   24 00000014 EA4F 74E7       MOV              R4, R7, ASR #31 ; Extract borro
                                                            w (bit 31 of R7) in
                                                            to R4
   25 00000018         
   26 00000018         ; Subtract the second 32-bit words
   27 00000018 6845            LDR              R5, [R0, #4] ; Load the second 
                                                            32 bits of num1 int
                                                            o R5
   28 0000001A 684E            LDR              R6, [R1, #4] ; Load the second 
                                                            32 bits of num2 int
                                                            o R6
   29 0000001C 1BAF            SUBS             R7, R5, R6  ; Subtract with bor
                                                            row
   30 0000001E 6057            STR              R7, [R2, #4] ; Store result in 
                                                            result[1]
   31 00000020 EA4F 74E7       MOV              R4, R7, ASR #31 ; Extract borro
                                                            w (bit 31 of R7) in
                                                            to R4
   32 00000024         
   33 00000024         ; Subtract the third 32-bit words
   34 00000024 6885            LDR              R5, [R0, #8] ; Load the third 3



ARM Macro Assembler    Page 2 


                                                            2 bits of num1 into
                                                             R5
   35 00000026 688E            LDR              R6, [R1, #8] ; Load the third 3
                                                            2 bits of num2 into
                                                             R6
   36 00000028 1BAF            SUBS             R7, R5, R6  ; Subtract with bor
                                                            row
   37 0000002A 6097            STR              R7, [R2, #8] ; Store result in 
                                                            result[2]
   38 0000002C EA4F 74E7       MOV              R4, R7, ASR #31 ; Extract borro
                                                            w (bit 31 of R7) in
                                                            to R4
   39 00000030         
   40 00000030         ; Subtract the highest 32-bit words
   41 00000030 68C5            LDR              R5, [R0, #12] ; Load the highes
                                                            t 32 bits of num1 i
                                                            nto R5
   42 00000032 68CE            LDR              R6, [R1, #12] ; Load the highes
                                                            t 32 bits of num2 i
                                                            nto R6
   43 00000034 1BAF            SUBS             R7, R5, R6  ; Subtract with bor
                                                            row
   44 00000036 60D7            STR              R7, [R2, #12] ; Store result in
                                                             result[3]
   45 00000038 EA4F 74E7       MOV              R4, R7, ASR #31 ; Extract borro
                                                            w (bit 31 of R7) in
                                                            to R4
   46 0000003C 601C            STR              R4, [R3]    ; Store final borro
                                                            w value
   47 0000003E         
   48 0000003E         ; Infinite loop to stop the processor
   49 0000003E         STOP
   50 0000003E E7FE            B                STOP
   51 00000040         
   52 00000040         ; Define the 128-bit numbers
   53 00000040         num1
   54 00000040 12345678        DCD              0x12345678  ; num1[0]
   55 00000044 23456789        DCD              0x23456789  ; num1[1]
   56 00000048 34567890        DCD              0x34567890  ; num1[2]
   57 0000004C 45678901        DCD              0x45678901  ; num1[3]
   58 00000050         
   59 00000050         num2
   60 00000050 11111111        DCD              0x11111111  ; num2[0]
   61 00000054 22222222        DCD              0x22222222  ; num2[1]
   62 00000058 33333333        DCD              0x33333333  ; num2[2]
   63 0000005C 44444444        DCD              0x44444444  ; num2[3]
   64 00000060         
   65 00000060 00000000 
              00000000 
              00000000 
              00000000         AREA             mydata, DATA, READWRITE
   66 00000000         result
   67 00000000 00000000 
              00000000 
              00000000 
              00000000         DCD              0, 0, 0, 0  ; Placeholder for r
                                                            esult (4 x 32-bit w
                                                            ords)
   68 00000010         



ARM Macro Assembler    Page 3 


   69 00000010         borrow
   70 00000010 00000000        DCD              0           ; Placeholder for b
                                                            orrow
   71 00000014         
   72 00000014         
   73 00000014                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=q3.d -oq
3.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LP
C17xx --predefine="__EVAL SETA 1" --list=q3.lst q3.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 1 in file q3.asm
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 3 in file q3.asm
   Uses
      At line 2 in file q3.asm
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 10 in file q3.asm
   Uses
      At line 5 in file q3.asm
      At line 9 in file q3.asm

STOP 0000003E

Symbol: STOP
   Definitions
      At line 49 in file q3.asm
   Uses
      At line 50 in file q3.asm
Comment: STOP used once
mycode 00000000

Symbol: mycode
   Definitions
      At line 7 in file q3.asm
   Uses
      None
Comment: mycode unused
num1 00000040

Symbol: num1
   Definitions
      At line 53 in file q3.asm
   Uses
      At line 11 in file q3.asm
Comment: num1 used once
num2 00000050

Symbol: num2
   Definitions
      At line 59 in file q3.asm
   Uses
      At line 12 in file q3.asm
Comment: num2 used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

borrow 00000010

Symbol: borrow
   Definitions
      At line 69 in file q3.asm
   Uses
      At line 14 in file q3.asm
Comment: borrow used once
mydata 00000000

Symbol: mydata
   Definitions
      At line 65 in file q3.asm
   Uses
      None
Comment: mydata unused
result 00000000

Symbol: result
   Definitions
      At line 66 in file q3.asm
   Uses
      At line 13 in file q3.asm
Comment: result used once
3 symbols
343 symbols in table
