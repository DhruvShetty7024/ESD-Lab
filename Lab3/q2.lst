


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             RESET , DATA , READONLY
    2 00000000                 EXPORT           __Vectors
    3 00000000         __Vectors
    4 00000000 10001000        DCD              0X10001000  ;stack pointer valu
                                                            e stack is empty
    5 00000004 00000000        DCD              Reset_Handler ;reset vector
    6 00000008                 ALIGN
    7 00000008                 AREA             mycode , CODE, READONLY
    8 00000000                 ENTRY
    9 00000000                 EXPORT           Reset_Handler
   10 00000000         Reset_Handler
   11 00000000 4815            LDR              R0, =num1   ; Load the address 
                                                            of the first 128-bi
                                                            t number into R0
   12 00000002 4916            LDR              R1, =num2   ; Load the address 
                                                            of the second 128-b
                                                            it number into R1
   13 00000004 4A16            LDR              R2, =result ; Load the address 
                                                            to store the result
                                                             into R2
   14 00000006         
   15 00000006         ; Initialize carry to 0
   16 00000006 F04F 0300       MOV              R3, #0      ; R3 will store the
                                                             carry
   17 0000000A         
   18 0000000A         ; Add the lower 32-bit words
   19 0000000A 6804            LDR              R4, [R0]    ; Load lower 32 bit
                                                            s of num1 into R4
   20 0000000C 680D            LDR              R5, [R1]    ; Load lower 32 bit
                                                            s of num2 into R5
   21 0000000E 1966            ADDS             R6, R4, R5  ; Add the lower 32-
                                                            bit words with carr
                                                            y
   22 00000010 6016            STR              R6, [R2]    ; Store result in r
                                                            esult[0]
   23 00000012 EA4F 73E6       MOV              R3, R6, ASR #31 ; Extract carry
                                                             from the result (i
                                                            f any)
   24 00000016         
   25 00000016         ; Add the second 32-bit words
   26 00000016 6844            LDR              R4, [R0, #4] ; Load the second 
                                                            32 bits of num1 int
                                                            o R4
   27 00000018 684D            LDR              R5, [R1, #4] ; Load the second 
                                                            32 bits of num2 int
                                                            o R5
   28 0000001A EB54 0605       ADCS             R6, R4, R5  ; Add with carry
   29 0000001E 6056            STR              R6, [R2, #4] ; Store result in 
                                                            result[1]
   30 00000020         
   31 00000020         ; Add the third 32-bit words
   32 00000020 6884            LDR              R4, [R0, #8] ; Load the third 3
                                                            2 bits of num1 into
                                                             R4
   33 00000022 688D            LDR              R5, [R1, #8] ; Load the third 3
                                                            2 bits of num2 into
                                                             R5
   34 00000024 EB54 0605       ADCS             R6, R4, R5  ; Add with carry
   35 00000028 6096            STR              R6, [R2, #8] ; Store result in 



ARM Macro Assembler    Page 2 


                                                            result[2]
   36 0000002A         
   37 0000002A         ; Add the highest 32-bit words
   38 0000002A 68C4            LDR              R4, [R0, #12] ; Load the highes
                                                            t 32 bits of num1 i
                                                            nto R4
   39 0000002C 68CD            LDR              R5, [R1, #12] ; Load the highes
                                                            t 32 bits of num2 i
                                                            nto R5
   40 0000002E EB54 0605       ADCS             R6, R4, R5  ; Add with carry
   41 00000032 60D6            STR              R6, [R2, #12] ; Store result in
                                                             result[3]
   42 00000034         
   43 00000034         ; Infinite loop to stop the processor
   44 00000034         STOP
   45 00000034 E7FE            B                STOP
   46 00000036         
   47 00000036         ; Define the 128-bit numbers
   48 00000036         num1
   49 00000036 00 00 12345678  DCD              0x12345678  ; num1[0]
   50 0000003C 23456789        DCD              0x23456789  ; num1[1]
   51 00000040 34567890        DCD              0x34567890  ; num1[2]
   52 00000044 45678901        DCD              0x45678901  ; num1[3]
   53 00000048         
   54 00000048         num2
   55 00000048 11111111        DCD              0x11111111  ; num2[0]
   56 0000004C 22222222        DCD              0x22222222  ; num2[1]
   57 00000050 33333333        DCD              0x33333333  ; num2[2]
   58 00000054 44444444        DCD              0x44444444  ; num2[3]
   59 00000058         
   60 00000058 00000000 
              00000000 
              00000000         AREA             mydata, DATA, READWRITE
   61 00000000         result
   62 00000000 00000000 
              00000000 
              00000000 
              00000000         DCD              0, 0, 0, 0  ; Placeholder for r
                                                            esult (4 x 32-bit w
                                                            ords)
   63 00000010         
   64 00000010                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=q2.d -oq
2.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\NXP\LP
C17xx --predefine="__EVAL SETA 1" --list=q2.lst q2.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 1 in file q2.asm
   Uses
      None
Comment: RESET unused
__Vectors 00000000

Symbol: __Vectors
   Definitions
      At line 3 in file q2.asm
   Uses
      At line 2 in file q2.asm
Comment: __Vectors used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Reset_Handler 00000000

Symbol: Reset_Handler
   Definitions
      At line 10 in file q2.asm
   Uses
      At line 5 in file q2.asm
      At line 9 in file q2.asm

STOP 00000034

Symbol: STOP
   Definitions
      At line 44 in file q2.asm
   Uses
      At line 45 in file q2.asm
Comment: STOP used once
mycode 00000000

Symbol: mycode
   Definitions
      At line 7 in file q2.asm
   Uses
      None
Comment: mycode unused
num1 00000036

Symbol: num1
   Definitions
      At line 48 in file q2.asm
   Uses
      At line 11 in file q2.asm
Comment: num1 used once
num2 00000048

Symbol: num2
   Definitions
      At line 54 in file q2.asm
   Uses
      At line 12 in file q2.asm
Comment: num2 used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

mydata 00000000

Symbol: mydata
   Definitions
      At line 60 in file q2.asm
   Uses
      None
Comment: mydata unused
result 00000000

Symbol: result
   Definitions
      At line 61 in file q2.asm
   Uses
      At line 13 in file q2.asm
Comment: result used once
2 symbols
342 symbols in table
